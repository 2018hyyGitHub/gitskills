######## Git常用命令 ########
把本地master分支的最新修改推送至GitHub:  $ git push origin master
========================================================================================================================
提交：
$ git add readme.txt
$ git commit -m "add readme.txt"
========================================================================================================================
创建分支：
$ git checkout -b dev    	(创建dev分支，然后切换到dev分支)git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:
$ git branch dev
$ git checkout dev		切换分支
========================================================================================================================
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
========================================================================================================================
用带参数的git log也可以看到分支的合并情况：	$ git log --graph --pretty=oneline --abbrev-commit
========================================================================================================================
分支策略：	在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的
========================================================================================================================
多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。	
========================================================================================================================
创建标签：			git tag <tagname>	用于新建一个标签，默认为HEAD，也可以指定一个commit id；
指定标签信息：		git tag -a <tagname> -m "blablabla..."	可以指定标签信息；
查看所有标签：		git tag
推送一个本地标签：	git push origin <tagname>
推送全部未推送过的本地标签：	git push origin --tags
删除一个本地标签：	git tag -d <tagname>
删除一个远程标签：	git push origin :refs/tags/<tagname>
========================================================================================================================
查看历史commit：
 git log --pretty=oneline --abbrev-commit

 

	
	